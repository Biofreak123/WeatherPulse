import os
import requests
from flask import Flask, request, jsonify

from datetime import datetime, timedelta

app = Flask(__name__)

# Alpaca credentials from environment variables
ALPACA_BASE_URL = "https://paper-api.alpaca.markets"
HEADERS = {
    "APCA-API-KEY-ID": os.getenv("ALPACA_API_KEY"),
    "APCA-API-SECRET-KEY": os.getenv("ALPACA_SECRET_KEY"),
}

@app.route("/")
def home():
    return "<h2>âœ… Alpaca Trading Webhook is Live</h2><p>POST to <code>/webhook</code> with a JSON payload.</p>"

def get_2dte_date():
    today = datetime.now()
    dte = 2
    date = today
    while dte > 0:
        date += timedelta(days=1)
        if date.weekday() < 5:
            dte -= 1
    return date.strftime("%Y-%m-%d")

def round_to_nearest_strike(price):
    return round(price)

def get_atm_option_contract(ticker, direction):
    price_data = requests.get(f"{ALPACA_BASE_URL}/v2/stocks/{ticker}/quotes/latest", headers=HEADERS).json()
    current_price = float(price_data["askprice"])
    strike = round_to_nearest_strike(current_price)
    expiry = get_2dte_date()
    option_type = "call" if direction == "CALL" else "put"

    params = {
        "symbol": ticker,
        "expiration": expiry,
        "type": option_type,
        "strike": strike,
    }
    contracts_url = f"{ALPACA_BASE_URL}/v1beta1/options/contracts/search"
    res = requests.get(contracts_url, headers=HEADERS, params=params)
    contracts = res.json().get("contracts", [])
    return contracts[0]["symbol"] if contracts else None

def place_market_order(symbol, qty):
    order = {
        "symbol": symbol,
        "qty": qty,
        "side": "buy",
        "type": "market",
        "time_in_force": "day"
    }
    res = requests.post(f"{ALPACA_BASE_URL}/v2/options/orders", headers=HEADERS, json=order)
    return res.json()

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    signal = data.get("signal")
    ticker = data.get("ticker", "SPY")
    qty = data.get("qty", 1)

    if signal not in ["CALL", "PUT"]:
        return jsonify({"error": "Invalid signal"}), 400

    contract_symbol = get_atm_option_contract(ticker, signal)
    if not contract_symbol:
        return jsonify({"error": "No contract found"}), 400

    order_result = place_market_order(contract_symbol, qty)
    return jsonify({
        "message": f"{signal} order placed",
        "option": contract_symbol,
        "order_result": order_result
    })

app.run(host="0.0.0.0", port=3000)
